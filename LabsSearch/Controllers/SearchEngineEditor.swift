//
//  SearchEngineEditor.swift
//  LabsSearch
//
//  Created by Xcode on ’19/06/18.
//  Copyright © 2019 Distant Labs. All rights reserved.
//

import Foundation

// TODO: This controller should eventually contain most of the logic from AddEditEngineTableVC.
// updateEngine() from AllEnginesTVC should also likely be in here.
// Thus, it should be in charge of OpS Controller and IconFetcher as well.
// It may also hold the SearchEngine object being manipulated.
// For now, it will perform the task of holding the HTML generated by any of the above related controllers.
// Currently, the character encoder will use this information.
// In the future, all controllers will be able to request the HTML and skip the relevant redundant network call.

/// Allows the add/edit engine table view controller to receive the new encoding.
protocol SearchEngineEditorDelegate {
    /// Inform the delegate of any changes to the character encoding.
    ///
    /// - Parameter encoding: A `CharacterEncoding` object, possibly `nil`.
    func updateCharacterEncoding(_ encoding: CharacterEncoding?)
}

/// Handles all business related to creating and modifying `SearchEngine` objects.
///
/// At the moment, most of this controller's functionality is actually performed by `AddEditTableViewController`. This will be remedied in a future revision.
struct SearchEngineEditor {
    
    // MARK: - Properties
    
    var delegate: SearchEngineEditorDelegate?
    
    /// Any controller which makes a network call for the engine's HTML will pass the HTML here.
    var html: String?
    
    // The CharacterEncoding can be accessed via characterEncoder.encoding
    var characterEncoder: CharacterEncoder? {
        // Alert the delegate whenever this value is changed
        willSet { delegate?.updateCharacterEncoding(newValue?.encoding) }
    }
    
    // TODO: Getting the HTML directly from SearchEngineEditor.
    // As most other objects under this require the HTML, we should fetch it here.
    // We should also grab the header info, so that eg. CharacterEncoder can try to use that instead
    
//    let engine: SearchEngine
    
    
    // MARK: - Methods
    
    // TODO: Are we going to use this?
//    func getCharacterEncoding() {
//        _ = CharacterEncoder(encoding: "")
//    }
    
}
